<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chinlin_stand_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Slime

// inherit from parent Create Event
event_inherited();

hp = 20;
max_hp = hp;
damage = 5;
exp_worth = 7;
image_speed = .2;
spd = 2;
state = scr_enemy_idle_state;
alarm[0] = room_speed*irandom_range(2, 5);
sight = 64;
x_axis = 0;
y_axis = 0;
movement = IDLE;
dir_facing = RIGHT;

// set move sprites
sprite[RIGHT, MOVE] = spr_chinlin_run_right;
sprite[UP, MOVE] = spr_chinlin_run_up;
sprite[DOWN, MOVE] = spr_chinlin_run_down;
sprite[LEFT, MOVE] = spr_chinlin_run_right;

// set attack sprites
sprite[RIGHT, ATTACK] = spr_chinlin_run_right;
sprite[UP, ATTACK] = spr_chinlin_run_up;
sprite[DOWN, ATTACK] = spr_chinlin_run_down;
sprite[LEFT, ATTACK] = spr_chinlin_run_right;

// set idle sprites
sprite[RIGHT, IDLE] = spr_chinlin_stand_right;
sprite[UP, IDLE] = spr_chinlin_stand_up;
sprite[DOWN, IDLE] = spr_chinlin_stand_down;
sprite[LEFT, IDLE] = spr_chinlin_stand_right;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create loot and exp drops on death

if instance_exists(obj_player) {

    // Drop xp bubble
    var new_exp_bubble = instance_create(x + random_range(-32, 32), y + random_range(-32, 32), obj_exp_point);
    new_exp_bubble.exp_worth = exp_worth;
    
    // Chance to drop health bubble
    if (scr_chance(.33) and obj_player_stats.hp &lt; obj_player_stats.max_hp) {
        instance_create(x + random_range(-32, 32), y + random_range(-32, 32), obj_health);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stall Alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Patrol alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Current State

// Inherit step event from parent
event_inherited();

// Execute current state script
script_execute(state);

// Set current sprite for dir_facing
sprite_index = sprite[dir_facing, movement];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Damages Player 

if (state != scr_enemy_stall_state) {
    var dir = point_direction(other.x, other.y, x, y);
    var x_dir = lengthdir_x(1, dir);
    var y_dir = lengthdir_y(1, dir);
    var damage = instance_create(other.x + x_dir, other.y + y_dir, obj_damage);
    damage.creator = id;
    damage.knock_back = 5;
    state = scr_enemy_stall_state;
    alarm[1] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Enemy and other necessary stats

draw_self();

if (hp &lt; max_hp and hp &gt; 0) {
    var percent = (hp / max_hp) * 100;
    draw_healthbar(x - 8, y - 13, x + 10, y - 10, percent, c_black, c_red, c_green, 0, true, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.200000002980232</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,14</point>
    <point>20,14</point>
    <point>20,24</point>
    <point>4,24</point>
  </PhysicsShapePoints>
</object>
